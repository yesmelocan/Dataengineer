

#melih
version: "3.9"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka_network

  kafka:
    image: "bitnami/kafka:3.3.1"
    container_name: kafka-container-1
    hostname: kafka-1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,PLAINTEXT_HOST://:9093"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
    # If you are running it on your own computer, it should be PLAINTEXT localhost:9092.
    # If you are running it on a VM, it should be IP_address:9092.
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://34.31.219.181:9092,PLAINTEXT_HOST://kafka-1:9093"
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181/kafka-1
      ALLOW_PLAINTEXT_LISTENER: "yes"
    networks:
      - kafka_network

  connect:
    image: debezium/connect:latest
    container_name: connect
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: 'kafka-1:9093'
      GROUP_ID: '1' # Debezium consumer group id
      CONFIG_STORAGE_TOPIC: 'connect-configs' # Debezium config topic
      OFFSET_STORAGE_TOPIC: 'connect-offsets' # Debezium offset topic
      STATUS_STORAGE_TOPIC: 'connect-status' # Debezium status topic
      CONNECT_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter' # Key converter
      CONNECT_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter' # Value converter
      CONNECT_INTERNAL_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter' # Internal key converter
      CONNECT_INTERNAL_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter' # Internal value converter
      CONNECT_REST_ADVERTISED_HOST_NAME: 'connect' # Rest API'nin host adÄ±
      CONNECT_PLUGIN_PATH: '/kafka/connect' # Plugin path
      CONNECT_LOG4J_ROOT_LOGLEVEL: 'INFO' # Log level
    depends_on:
      - kafka
    networks:
      - kafka_network

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:master
    ports:
      - 8080:8080 # Changed to avoid port clash with akhq
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-1:9093
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - kafka_network
    
  postgres:
    image: postgres:13
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      - PGDATA=/data/postgres 
    networks:
      - kafka_network
    restart: unless-stopped 
    volumes:
      - ./postgres:/data/postgres
    
    # it's important to trigger that command when we work with postgres
    command: postgres -c wal_level=logical -c max_replication_slots=1 -c max_wal_senders=1

  pyspark:
    image: jupyter/pyspark-notebook
    container_name: pyspark
    environment:
      JUPYTER_ENABLE_LAB: "yes" 
    command: ["start-notebook.sh", "--NotebookApp.token='123'", "--NotebookApp.password=''"]
    ports:
      - "8888:8888"
    volumes:
      - ./pyspark:/home/jovyan
    networks:
      - kafka_network
    
networks:
  kafka_network:
    driver: bridge
